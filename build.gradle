buildscript {
  ext {
    springBootVersion = '2.1.2.RELEASE'
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath('com.bmuschko:gradle-docker-plugin:4.4.1')
  }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-remote-api'

group = 'com.seandougnelson'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
  mavenCentral()
  jcenter()
}

dependencies {
  implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
  implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
  implementation 'com.spotify:docker-client:8.15.0'
  implementation 'org.glassfish.jersey.inject:jersey-hk2:2.28'
  testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
}

bootJar {
  dependsOn 'test'
  mainClassName = 'com.seandougnelson.driftlog.DriftlogApplication'
}

task copyDockerFiles(type: Copy) {
  dependsOn 'bootJar'
  from "${buildDir}/libs/driftlog-${version}.jar", 'docker/driftlog/Dockerfile'
  into "${buildDir}/docker"
  rename "driftlog-${version}.jar", 'driftlog.jar'
}

def driftlogDockerRepo = 'seandougnelson/driftlog'
def openjdkSpringBootDockerRepo = 'seandougnelson/openjdk-spring-boot'

import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
task removeDockerImageWithVersionTag(type: DockerRemoveImage) {
  targetImageId { "${driftlogDockerRepo}:${version}" }
  onError { /* ignored */ }
}
task removeDockerImages(type: DockerRemoveImage) {
  dependsOn 'removeDockerImageWithVersionTag'
  targetImageId { "${driftlogDockerRepo}:latest" }
  onError { /* ignored */ }
}
task removeAllDockerImages(type: DockerRemoveImage) {
  dependsOn 'removeDockerImages'
  targetImageId { "${openjdkSpringBootDockerRepo}:11-slim" }
  onError { /* ignored */ }
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
task buildDockerImages(type: DockerBuildImage) {
  dependsOn 'removeDockerImages', 'copyDockerFiles'
  inputDir = file("${buildDir}/docker")
  tags.add("${driftlogDockerRepo}:latest")
  tags.add("${driftlogDockerRepo}:${version}")
}
